
name: Auto Project Management

on:
  issues:
    types: [opened]
  pull_request:
    types: [opened, closed]

jobs:
  manage-project:
    runs-on: ubuntu-latest
    steps:
      - name: Get Project Data
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ORGANIZATION: ${{ github.repository_owner }}
          PROJECT_NUMBER: 1 
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

          echo "PROJECT_ID=$(jq -r '.data.organization.projectV2.id' project_data.json)" >> $GITHUB_ENV
          echo "STATUS_FIELD_ID=$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name == "Status") | .id' project_data.json)" >> $GITHUB_ENV
          echo "TODO_OPTION_ID=$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name == "Status") | .options[] | select(.name == "Todo") | .id' project_data.json)" >> $GITHUB_ENV
          echo "IN_PROGRESS_OPTION_ID=$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name == "Status") | .options[] | select(.name == "In Progress") | .id' project_data.json)" >> $GITHUB_ENV
          echo "DONE_OPTION_ID=$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name == "Status") | .options[] | select(.name == "Done") | .id' project_data.json)" >> $GITHUB_ENV

      - name: Add Issue to Project
        if: github.event_name == 'issues'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_ID: ${{ github.event.issue.node_id }}
        run: |
          item_id=$(gh api graphql -f query='
            mutation($project: ID!, $issue: ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectV2ItemById.item.id')
          
          gh api graphql -f query='
            mutation($project: ID!, $item: ID!, $status_field: ID!, $status_value: String!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $project,
                itemId: $item,
                fieldId: $status_field,
                value: { singleSelectOptionId: $status_value }
              }) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f item=$item_id -f status_field=$STATUS_FIELD_ID -f status_value=$TODO_OPTION_ID

      - name: Add PR to Project
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_ID: ${{ github.event.pull_request.node_id }}
        run: |
          item_id=$(gh api graphql -f query='
            mutation($project: ID!, $pr: ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $pr}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f pr=$PR_ID --jq '.data.addProjectV2ItemById.item.id')

          gh api graphql -f query='
            mutation($project: ID!, $item: ID!, $status_field: ID!, $status_value: String!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $project,
                itemId: $item,
                fieldId: $status_field,
                value: { singleSelectOptionId: $status_value }
              }) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f item=$item_id -f status_field=$STATUS_FIELD_ID -f status_value=$IN_PROGRESS_OPTION_ID

      - name: Update Issue Status on PR Merge
        if: github.event.pull_request.merged == true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # PRに関連付けられたIssueのIDを取得
          issue_url=$(gh pr view ${{ github.event.pull_request.number }} --json body -q '.body' | grep -o 'https://github.com/.*/issues/[0-9]*' | head -n 1)
          if [ -n "$issue_url" ]; then
            issue_id=$(gh api graphql -f query='
              query($url: URI!) {
                resource(url: $url) {
                  ... on Issue {
                    id
                    projectItems(first: 10) {
                      nodes {
                        id
                      }
                    }
                  }
                }
              }' -f url=$issue_url --jq '.data.resource.projectItems.nodes[0].id')
            
            if [ -n "$issue_id" ]; then
              gh api graphql -f query='
                mutation($project: ID!, $item: ID!, $status_field: ID!, $status_value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $project,
                    itemId: $item,
                    fieldId: $status_field,
                    value: { singleSelectOptionId: $status_value }
                  }) {
                    item {
                      id
                    }
                  }
                }' -f project=$PROJECT_ID -f item=$issue_id -f status_field=$STATUS_FIELD_ID -f status_value=$DONE_OPTION_ID
            fi
          fi
