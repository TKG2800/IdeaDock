name: Auto Project Management

on:
  issues:
    types: [opened]
  pull_request:
    types: [opened, closed]

jobs:
  add_new_issue_to_project:
    name: Add new issue to Project
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'
    steps:
      - name: Add to project
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/users/${{ github.repository_owner }}/projects/11
          # github-tokenは必須。リポジトリのSecretsに正しく設定されているか要確認
          github-token: ${{ secrets.PROJECT_AUTOMATION_PAT }}

  move_item_based_on_pr:
    name: Move Project Item based on PR Status
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    env:
      GH_TOKEN: ${{ secrets.PROJECT_AUTOMATION_PAT }}
      PROJECT_NUMBER: 11
      OWNER: ${{ github.repository_owner }}
    steps:
      - name: Get linked issue number
        id: get_issue
        run: |
          issue_number=$(gh pr view ${{ github.event.pull_request.html_url }} --json closingIssuesReferences | jq -r '.closingIssuesReferences[0].number')
          if [[ -n "$issue_number" ]]; then
            echo "Found linked issue: #$issue_number"
            echo "::set-output name=number::$issue_number"
          else
            echo "No linked issue found."
          fi

      - name: Move project item
        if: steps.get_issue.outputs.number
        run: |
          TARGET_STATUS=""
          if [[ "${{ github.event.action }}" == "opened" ]]; then
            TARGET_STATUS="In Progress"
          elif [[ "${{ github.event.action }}" == "closed" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            TARGET_STATUS="Done"
          fi

          if [[ -z "$TARGET_STATUS" ]]; then
            echo "No status change needed for this event."
            exit 0
          fi

          echo "Moving Issue #${{ steps.get_issue.outputs.number }} to '$TARGET_STATUS'"

          item_id=$(gh project item-list ${{ env.PROJECT_NUMBER }} --owner ${{ env.OWNER }} --format json | jq -r '.items[] | select(.content.number == ${{ steps.get_issue.outputs.number }}) | .id')
          if [[ -z "$item_id" ]]; then
            echo "::error::Could not find project item for Issue #${{ steps.get_issue.outputs.number }}"
            exit 1
          fi

          status_field_id=$(gh project field-list ${{ env.PROJECT_NUMBER }} --owner ${{ env.OWNER }} --format json | jq -r '.fields[] | select(.name == "Status") | .id')
          target_status_id=$(gh project field-list ${{ env.PROJECT_NUMBER }} --owner ${{ env.OWNER }} --format json | jq -r ".fields[] | select(.id == \"$status_field_id\") | .settings.options[] | select(.name == \"$TARGET_STATUS\") | .id")

          gh project item-edit --id "$item_id" --field-id "$status_field_id" --project-id ${{ env.PROJECT_NUMBER }} --owner ${{ env.OWNER }} --single-select-option-id "$target_status_id"
          echo "Successfully updated project item."